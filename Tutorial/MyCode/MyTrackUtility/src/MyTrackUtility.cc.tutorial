// -*- C++ -*-
//
// Package:    MyTrackUtility
// Class:      MyTrackUtility
// 
/**\class MyTrackUtility MyTrackUtility.cc MyCode/MyTrackUtility/src/MyTrackUtility.cc

 Description: <one line class summary>

 Implementation:
     <Notes on implementation>
*/
//
// Original Author:  Oliver Gutsche
//         Created:  Tue Jul 11 14:19:11 CDT 2006
// $Id$
//
//


// system include files
#include <memory>
#include <string>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackUtil/interface/TrackUtil.h"
#include "DataFormats/TrackUtil/interface/TrackUtilCollection.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

//
// class decleration
//

class MyTrackUtility : public edm::EDProducer {
   public:
      explicit MyTrackUtility(const edm::ParameterSet&);
      ~MyTrackUtility();


      virtual void produce(edm::Event&, const edm::EventSetup&);
   private:
      // ----------member data ---------------------------
      std::string trackProducerName;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
MyTrackUtility::MyTrackUtility(const edm::ParameterSet& iConfig)
{
   produces<TrackUtilCollection>();

   //now do what ever other initialization is needed
   trackProducerName = iConfig.getParameter<std::string>("TrackProducer");
}


MyTrackUtility::~MyTrackUtility()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
MyTrackUtility::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   // Get Inputs
   edm::Handle<reco::TrackCollection> tracks;
   iEvent.getByLabel(trackProducerName, tracks);

   // create output collection instance
   std::auto_ptr<TrackUtilCollection> output(new TrackUtilCollection());

   // fill collection
   output->push_back(TrackUtil(tracks->size()));

   iEvent.put(output);
}

//define this as a plug-in
DEFINE_FWK_MODULE(MyTrackUtility)
