// -*- C++ -*-
//
// Package:    MyTrackAnalyzer
// Class:      MyTrackAnalyzer
// 
/**\class MyTrackAnalyzer MyTrackAnalyzer.cc MyCode/MyTrackAnalyzer/src/MyTrackAnalyzer.cc

 Description: <one line class summary>

 Implementation:
     <Notes on implementation>
*/
//
// Original Author:  Oliver Gutsche
//         Created:  Tue Jul 11 11:56:52 CDT 2006
// $Id$
//
//


// system include files
#include <memory>
#include <string>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

//
// class decleration
//

class MyTrackAnalyzer : public edm::EDAnalyzer {
   public:
      explicit MyTrackAnalyzer(const edm::ParameterSet&);
      ~MyTrackAnalyzer();


      virtual void analyze(const edm::Event&, const edm::EventSetup&);
   private:
      // ----------member data ---------------------------
      std::string trackProducerName;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
MyTrackAnalyzer::MyTrackAnalyzer(const edm::ParameterSet& iConfig)
{
   //now do what ever initialization is needed
   trackProducerName = iConfig.getParameter<std::string>("TrackProducer");

}


MyTrackAnalyzer::~MyTrackAnalyzer()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
MyTrackAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   // Get Inputs 
   edm::Handle<reco::TrackCollection> tracks;
   iEvent.getByLabel(trackProducerName, tracks);

   edm::LogInfo("Tutorial") << "number of Tracks: " << tracks->size();

   for ( reco::TrackCollection::const_iterator track = tracks->begin(); track != tracks->end(); ++track ) {
      edm::LogInfo("Tutorial") << "Perigee-Parameter: transverseCurvature: " << track->transverseCurvature();
      edm::LogInfo("Tutorial") << "Perigee-Parameter: theta: " << track->theta();
      edm::LogInfo("Tutorial") << "Perigee-Parameter: phi0: " << track->phi0();
      edm::LogInfo("Tutorial") << "Perigee-Parameter: d0: " << track->d0();
      edm::LogInfo("Tutorial") << "Perigee-Parameter: dz: " << track->dz();
   }

}

//define this as a plug-in
DEFINE_FWK_MODULE(MyTrackAnalyzer)
