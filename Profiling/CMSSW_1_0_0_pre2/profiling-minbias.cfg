process P = 
{

  service = MessageLogger
  {
    # MessageLogger configuration
    untracked vstring destinations =
    {
      "cout"
    }

    untracked vstring categories =
    { 
      "TimeEvent"
    }

    untracked PSet cout =  
    {
      untracked string threshold = "INFO"
      untracked PSet default = 
      { 
        untracked int32 limit = 0
      }
      untracked PSet TimeEvent = 
      { 
        untracked int32 limit = 100000000 
      }
    }
  
    untracked vstring fwkJobReports = 
    {
      "CONDOR_FRAMEWORKJOBREPORT"
    }
  
    untracked PSet FrameworkJobReport = 
    {
      untracked PSet default = 
      { 
        untracked int32 limit = 0 
      }
      untracked PSet FwkJob  = 
      { 
        untracked int32 limit = 10000000 
      }
    }
  }

  # input
  source = PoolSource 
  {
untracked vstring fileNames = {
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/ACC9E9D3-7826-DB11-9F7F-00304876A15B.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/50E66514-7926-DB11-95AC-00304875A9B5.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/840E7804-7A26-DB11-A9C6-00304875628B.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/00768D75-7926-DB11-89D9-003048767E49.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/488E2F9E-7B26-DB11-BC34-00304875A9E9.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/C050A601-7B26-DB11-8676-00304875A337.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/AA783352-7C26-DB11-83D6-003048767ED1.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/16F569DD-7C26-DB11-9CDE-00304875ABEF.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/A0B1247C-7D26-DB11-AAF3-003048767DF5.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/8AB5F656-7E26-DB11-85C0-003048769D4B.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/400F49F3-7F26-DB11-B17D-003048767EFD.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/D21CDE37-7F26-DB11-BD85-003048754E55.root',
 '/store/PreProd/2006/8/7/PreProd090pre3Minbias/DE5B1E43-C526-DB11-80EB-00304875A8E7.root'
}
    untracked int32 maxEvents = CONDOR_MAXEVENTS
    untracked uint32 skipEvents = CONDOR_SKIPEVENTS
  }
  # timing service
  service = Timing {}

  module myTimer = Timer
  {
    // whether to include timing info about Timer itself
    untracked bool includeSelf = false		
  }
#  include "HLTrigger/Timer/data/timer.cfi"

  # memory checking service
  service = SimpleMemoryCheck 
  {
    untracked int32 ignoreTotal = 1 # default is one
  }

  include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"

  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"
  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitMatcher.cfi"
  include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"
  include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer.cfi"
  include "RecoLocalTracker/SiPixelClusterizer/data/SiPixelClusterizer.cfi"
  include "RecoLocalTracker/SiPixelRecHits/data/SiPixelRecHits.cfi"

  sequence pixeltrackerlocalreco = {siPixelClusters, siPixelRecHits}
  sequence striptrackerlocalreco = {siStripClusters, siStripMatchedRecHits}

  sequence trackerlocalreco =  {pixeltrackerlocalreco, striptrackerlocalreco}

  # GlobalPixelSeedGenerator
  include "RecoTracker/TkSeedGenerator/data/GlobalMixedSeeds.cff"

  # Ckf
  include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cff"

  # Final Fit
  include "RecoTracker/TrackProducer/data/CTFFinalFitWithMaterial.cff"

  # RoadSearchSeedFinder
  include "RecoTracker/RoadSearchSeedFinder/data/RoadSearchSeeds.cff"

  # RoadSearchCloudMaker
  include "RecoTracker/RoadSearchCloudMaker/data/RawRoadSearchClouds.cff"

  # RoadSearchCloudMaker
  include "RecoTracker/RoadSearchCloudCleaner/data/CleanRoadSearchClouds.cff"

  # RoadSearchTrackCandidateMaker
  include "RecoTracker/RoadSearchTrackCandidateMaker/data/RoadSearchTrackCandidates.cff"

  # RS track fit with material 
  include "RecoTracker/TrackProducer/data/RSFinalFitWithMaterial.cff"

  sequence ckftracks = {globalMixedSeeds, ckfTrackCandidates, ctfWithMaterialTracks}
  sequence rstracks  = {roadSearchSeeds, rawRoadSearchClouds, cleanRoadSearchClouds, rsTrackCandidates, rsWithMaterialTracks}

  module RECO = PoolOutputModule 
  {
    untracked string fileName = 'CONDOR_OUTPUTFILENAME'
  } 

  path p1 = 
  {  
    trackerlocalreco,
    ckftracks,
    rstracks
  }

  endpath outpath = 
  { 
    myTimer,
    RECO
  }	
}
