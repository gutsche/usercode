#!/usr/bin/python

import sys, os, popen2

def main(argv) :
    """
    
    reconstruction
    
    condor WN script

    required parameters         :
    1: condor cluster number
    2: condor process number
    3: CMSSW_DIR
    4: RUN_DIR
    5: PARAMETER_SET (full path, has to contain keywords: maxEvents = CONDORMMAXEVENTS, skipEvents = CONDORSKIPEVENTS, CONDOR for unique part of output ROOT file and histogram ROOT file )
    6: GENERATOR_CFF   (FileInPath location of generator.cff, will be replaced for the placeholder CONDORGENERATIONCFF)
    7: NUM_EVENTS_PER_JOB
    8: Seed
    
    """

    cluster            = argv[0]
    process            = argv[1]
    cmssw_dir          = argv[2]
    run_dir            = argv[3]
    parameter_set      = argv[4]
    generator_cff      = argv[5]
    num_events_per_job = argv[6]
    seed               = argv[7]

    # check if cmssw_dir exists
    if not os.path.exists(cmssw_dir) :
        print ''
        print '    CMSSW_DIR does not exist!'
        print main.__doc__
        sys.exit(2)

    # check if parameter_set exists
    if not os.path.exists(parameter_set) :
        print ''
        print '    PARAMETER_SET does not exist!'
        print main.__doc__
        sys.exit(2)

    # calculate seed
    final_seed = int(seed) + int(process)

    # manipulate parameter-set
    input = file(parameter_set)
    output = file(run_dir + '/' + cluster + '_' + process + '.cfg','w')
    for line in input.readlines() :
        line = line.replace('CONDORMAXEVENTS',num_events_per_job)
        line = line.replace('CONDORGENERATIONCFF',generator_cff)
        line = line.replace('CONDORSEED',str(final_seed))
        line = line.replace('CONDOR',cluster + '_' + process)
        output.write(line)

    input.close()
    output.close()

    # create execution script
    script = file(run_dir + '/' + cluster + '_' + process + '.sh','w')
    script.write('#/bin/bash\n')
    script.write('START_TIME=`/bin/date`\n')
    script.write('echo "started at $START_TIME"\n')
    script.write('source /uscmst1/prod/sw/cms/shrc uaf\n')
    script.write('cd ' + cmssw_dir + '\n')
    script.write('eval `scramv1 runtime -sh`\n')
    script.write('cd ' + run_dir + '\n')
    script.write('echo "run: time cmsRun ' + cluster + '_' + process + '.cfg > ' + cluster + '_' + process + '.log 2>&1"\n')
    script.write('cmsRun ' + cluster + '_' + process + '.cfg > ' + cluster + '_' + process + '.log 2>&1\n')
    script.write('exitcode=$?\n')
    script.write('END_TIME=`/bin/date`\n')
    script.write('echo "ended at $END_TIME"\n')
    script.write('exit $exitcode\n')
    script.close()

    # change script permission to executable
    os.chmod(run_dir + '/' + cluster + '_' + process + '.sh',0755)

    # execute script
    cmd = 'cd ' + run_dir + ' && ./' + cluster + '_' + process + '.sh'
    process = popen2.Popen4(cmd)
    # process.tochild.close()
    errcode = os.WEXITSTATUS(process.wait())
    cmd_out = process.fromchild
    for line in cmd_out.readlines() :
        print line
    sys.exit(errcode)

if __name__ == '__main__' :
    main(sys.argv[1:])
