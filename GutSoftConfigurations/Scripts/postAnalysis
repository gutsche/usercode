#!/usr/bin/env python2.4

import sys, os, getopt, glob

def main(argv) :
    """
    
    postAnalysis
    
    check how many events have been processed and list errors and warnings

    parameters: <logfiles>
    
    """

    warnings = {}
    errors = {}
    runs = {}
    files = {}
    jobs = {}
    exceptions = []
    
    common_warnings = []
    common_warnings.append('CaloSD: Problem with primaryID **** set by force to TkID ****')
    common_warnings.append('************ Hit outside the detector ;')
    common_warnings.append('Beware a simplified trigger primitive computation is used for the ECAL selective readout')
    common_warnings.append('CSCRecHit2DInALayer WARNING! DIGI ON SAME CHANNEL. Please inform Muon developers')
    common_errors   = []
    common_errors.append('Extrapolation to vertex failed!')
    common_errors.append('next Surface')

    filenames = argv[0:]
    current_file = ''
    for filename in filenames :
        if os.path.exists(filename) :
            try:
                if filename[-3:] == '.gz' :
                    # zipped file
                    import gzip
                    file = gzip.GzipFile(filename)
                else :
                    file = open(filename)
            except IOError:
                print ''
                print 'Could not open file: ',filename
                print main.__doc__
                sys.exit(2)
            events_per_job = 0
            line = file.readline()
            while line :
                tmp = ''
                if line.find('<PFN>') >= 0 :
                    current_file = line.split(">")[1].split("<")[0].strip()
                if line.find('<EventsRead>') >= 0 and current_file != '' :
                    events = int(line.split(">")[1].split("<")[0].strip())
                    if current_file in files.keys() :
                        files[current_file] += events
                    else :
                        files[current_file] = events
                    events_per_job += events
                    current_file = ''
                if line.find('MSG-w') >= 0 :
                    header = line
                    line = file.readline()
                    while line :
                        header += line
                        if line.find('pre-events') > 0 or ( line.find('Run:') > 0 and line.find('Event:') > 0 ) :
                            break
                        line = file.readline()
                    header = header.replace('\n',' ')
                    category = header.split()[1] + ' ' + header.split()[2]

                    counter = 0
                    line = file.readline()
                    tmp += line
                    line = file.readline()
                    try:
                        while line[0] != '%' :
                            if counter < 2-1 :
                                tmp += line
                                counter += 1
                            line = file.readline()

                        for common_warning in common_warnings:
                            if tmp.find(common_warning) >= 0 :
                                tmp = common_warning

                        if category in warnings.keys() :
                            if tmp in warnings[category].keys() :
                                warnings[category][tmp] += 1
                            else :
                                warnings[category][tmp] = 1
                        else :
                            warnings[category] = {tmp : 1}
                    except:
                        dummy = 1

                if line.find('MSG-e') >= 0 :
                    header = line
                    line = file.readline()
                    while line :
                        header += line
                        if line.find('pre-events') > 0 or ( line.find('Run:') > 0 and line.find('Event:') > 0 ) :
                            break
                        line = file.readline()
                    header = header.replace('\n',' ')
                    category = header.split()[1] + ' ' + header.split()[2]

                    counter = 0
                    line = file.readline()
                    tmp += line
                    line = file.readline()
                    try:
                        while line[0] != '%' :
                            if counter < 2-1 :
                                tmp += line
                                counter += 1
                            line = file.readline()

                        for common_error in common_errors:
                            if tmp.find(common_error) >= 0 :
                                tmp = common_error

                        if category in errors.keys() :
                            if tmp in errors[category].keys() :
                                errors[category][tmp] += 1
                            else :
                                errors[category][tmp] = 1
                        else :
                            errors[category] = {tmp : 1}
                        
                    except:
                        dummy = 1

                    if tmp.find("xception") >= 0 :
                        if filename not in exceptions :
                            exceptions.append(filename)

                if line.find('Begin processing') >= 0 :
                    try:
                        run = int(line.split()[-3].strip().split(',')[0].strip())
                        event = int(line.split()[-1].strip())
                        if run in runs.keys() :
                            runs[run].append(event)
                        else :
                            runs[run] = [event]
                    except:
                        tmp = ''
                line = file.readline()

            jobs[filename] = events_per_job
                    
        else :
            print 'File:',filename,'does not exist!'


    # separator
    separator = ''
    for i in range(100) :
        separator += '-'

        
    # print warnings
    total = 0
    for category in warnings.keys() :
        for warning in warnings[category] :
            total += warnings[category][warning]

    print ''
    print separator
    print separator
    print 'Number of warnings:',total

    for category in warnings.keys() :
        for warning in warnings[category].keys() :
            print separator
            print ''
            print warnings[category][warning],'warning(s) in category:',category,'with first 2 lines of message:'
            print ''
            print warning

    # print errors
    total = 0
    for category in errors.keys() :
        for error in errors[category] :
            total += errors[category][error]

    print ''
    print separator
    print separator
    print 'Number of errors:',total

    for category in errors.keys() :
        for error in errors[category].keys() :
            print separator
            print ''
            print errors[category][error],'error(s) in category:',category,'with first 2 lines of message:'
            print ''
            print error

    # print exceptions
    total = 0
    for job in exceptions :
        total += 1

    print ''
    print separator
    print separator
    print 'Number of files with exceptions:',total
    print separator
    print ''
    
    for job in exceptions :
            print 'Exception in job: ' + job

    # print run and event summary
    print ''
    counter = 0
    sorted_runs = runs.keys()
    sorted_runs.sort()
    for run in sorted_runs:
        print 'Run:',run,'Events:',len(runs[run])
        counter += len(runs[run])

    print ''
    print 'Processed',len(runs.keys()),' Run(s) with total',counter,'Event(s).'

    # print jobs and number of read events per job
    print ''
    print 'number of events per job'
    print ''
    
    jobnames = jobs.keys()
    jobnames.sort()

    for job in jobnames :
        print '%5d events read in job: %s' % (jobs[job],job)
        
    # print files and number of read events per file
    print ''
    print 'number of events per file'
    print ''

    filenames = files.keys()
    # filenames.sort()
    
    for file in filenames :
        print '%5d events read in file: %s' % (files[file],file)

    

if __name__ == '__main__' :
    main(sys.argv[1:])
