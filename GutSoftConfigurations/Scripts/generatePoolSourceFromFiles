#!/usr/bin/python

import sys, os, getopt, glob, popen2

def main(argv) :
    """
    
    generatePoolSourceFromFiles
    
    take a file or a wildcard expression in \"\" and generate PoolSource
    execute in directory of files

    required parameters
    --file <names>                         :       file names (single file or wildcard expression in \"

    optional parameters                    :
    --dcache                               :       file is located in /pnfs/..., use dcache:
    --absolute                             :       use absolute paths
    --help (-h)                            :       help
    --debug (-d)                           :       debug statements
    
    """

    # default
    filename = ''
    absolute = 0
    debug = 0
    dcache = 0

    try:
        opts, args = getopt.getopt(argv, "", ["help", "debug", "file=", "absolute", "dcache"])
    except getopt.GetoptError:
        print main.__doc__
        sys.exit(2)

    # check command line parameter
    for opt, arg in opts :
        if opt == "--help" :
            print main.__doc__
            sys.exit()
        elif opt == "--debug" :
            debug = 1
        elif opt == "--absolute" :
            absolute = 1
        elif opt == "--dcache" :
            dcache = 1
        elif opt == "--file" :
            filename = arg

    if filename == '' :
        print main.__doc__
        sys.exit(2)


    absolute_dir = ''
    if absolute :
        absolute_dir = os.getcwd() + '/'
        
    filenames = glob.glob(filename)
    filenames.sort()

    filetype = 'file:'
    if dcache == 1 :
        filetype = 'dcache:'

    files = {}
    totalevents = 0
    corrupt_files = 0

    for filename in filenames :
	if filename.find('histograms') < 0 :
            cmd = 'EdmFileUtil -e -f ' + filetype+absolute_dir+filename
            proc = popen2.Popen4(cmd)
            exit = proc.wait()
            if exit == 0 :
                events = 0
                try:
                    events = int(proc.fromchild.readlines()[-1].split()[2])
                except:
                    print 'Number of events could not be extracted from '+filetype+absolute_dir+filename
                files[filetype+absolute_dir+filename] = events
                totalevents += events
            else :
                corrupt_files = 1
                files[filetype+absolute_dir+filename] = -1


    # output
    output = ''
    output += '#\n'
    output += '# '+ str(len(files)) + ' file(s) containing ' + str(totalevents) + ' events\n'
    output += '#\n'
    output += '# list of files (format: file events):\n'
    output += '#\n'
    for file in files.keys() :
        if files[file] != -1 :
            output += '# ' + file + ' ' + str(files[file]) + '\n'
    output += '#\n'
    if corrupt_files == 1 :
        output += '# list of corrupt files (format: file events):\n'
        output += '#\n'
        for file in files.keys() :
            if files[file] == -1 :
                output += '# ' + file + ' ' + str(files[file]) + '\n'
        output += '#\n'
    
    output += 'replace PoolSource.fileNames = {\n'
    for file in files.keys() :
        if files[file] != -1 :
            output += '  "' + file + '",\n'
    output = output[:-2]+'\n'
    output += '}\n'

    print output        

if __name__ == '__main__' :
    main(sys.argv[1:])
